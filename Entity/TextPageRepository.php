<?php

namespace Eotvos\VersenyrBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * TextPageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TextPageRepository extends NestedTreeRepository
{
    public function getTreeList()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('node')
            ->from('EotvosVersenyrBundle:TextPage', 'node')
            ->orderBy('node.root, node.lft', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }

    public function getPossibleParentList()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('node')
            ->from('EotvosVersenyrBundle:TextPage', 'node')
            ->where('node.special!=\'sections\'')
            ->orderBy('node.root, node.lft', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Returns the root page of a term
     * 
     * @param string $termName subject term
     * 
     * @return TextPage
     */
    public function getTermRoot($termName='')
    {
        try {
            if ($termName=='') {
                $term = $this->getEntityManager()
                    ->createQuery('SELECT t FROM EotvosVersenyrBundle:Term t WHERE t.active = true ORDER BY t.registrationStart DESC')
                    ->getResult();

                return $term[0]->getRootPage();
            } else {
                $termRep = $this->getEntityManager()
                    ->getRepository('EotvosVersenyrBundle:Term');

                $term = $termRep->findOneByName($termName);

                if ($term) {
                    return $term->getRootPage();
                }

                return null;
            }

        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nure) {
            throw $nure;
        }
    }


    /**
     * Gets a child page with a title
     * 
     * @param TextPage $parent parent record
     * @param string   $title  child's title
     * 
     * @return TextPage
     */
    public function getChildWithTitle($parent, $title)
    {
        try {
            if (!($parent instanceof TextPage)) {
                throw new \Exception("Illegal parent argument");
            }

            return $this->getEntityManager()
                ->createQuery('SELECT tp FROM Eotvos\VersenyrBundle\Entity\TextPage tp WHERE tp.parent=:parent AND tp.title=:title')
                ->setParameter('parent', $parent->getId())
                ->setParameter('title', $title)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nure) {
            throw $nure;
        }
    }


    /**
     * Gets the page with the given term and title
     * 
     * @param string $term  term
     * @param string $title title
     * 
     * @return TextPage
     */
    public function getForTermWithTitle($term, $title)
    {
        try {
            $parent = $this->getTermRoot($term);

            if ($parent === null) {
                return null;
            }

            return $this->getEntityManager()
                ->createQuery('SELECT tp FROM Eotvos\VersenyrBundle\Entity\TextPage tp WHERE tp.root=:parent AND tp.title=:title')
                ->setParameter('parent', $parent->getId())
                ->setParameter('title', $title)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nure) {
            throw $nure;
        }
    }


    /**
     * Gets a record for a given term and slug
     * 
     * @param string $term term name
     * @param string $slug page slug
     * 
     * @return TextPage
     */
    public function getForTermWithSlug($term, $slug)
    {
        try {
            $parent = $this->getTermRoot($term);

            if ($parent===null) {
                return null;
            }

            return $this->getEntityManager()
                ->createQuery('SELECT tp FROM Eotvos\VersenyrBundle\Entity\TextPage tp WHERE tp.root=:parent AND tp.slug=:slug')
                ->setParameter('parent', $parent->getId())
                ->setParameter('slug', $slug)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nure) {
            throw $nure;
        }
    }

    public function getForTermWithSpecial($term, $special)
    {
        try {
            $parent = $this->getTermRoot($term);

            if ($parent===null) {
                return null;
            }

            return $this->getEntityManager()
                ->createQuery('SELECT tp FROM Eotvos\VersenyrBundle\Entity\TextPage tp WHERE tp.root=:parent AND tp.special=:special')
                ->setParameter('parent', $parent->getId())
                ->setParameter('special', $special)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nure) {
            throw $nure;
        }
    }

}
