<?php

namespace Eotvos\VersenyrBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SubmissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubmissionRepository extends EntityRepository
{
    public function getStandingByRound($round)
    {
        $list = $this->getLastUniqByRound($round);

        $userList = array();

        foreach ($list as $record) {
            if (!isset($userList[$record->getUser()->__toString()])) {
                $userList[$record->getUser()->__toString()] = array();
            }
            $ref =& $userList[$record->getUser()->__toString()];
            $ref[] = $record;
        }

        $retList = array();

        foreach ($userList as $user => $subm) {
            $retList[] = array($user, $subm, null);
        }

        return $retList;
    }

    public function getLastUniqByRound($round)
    {
        $registry = array();
        $ret = array();

        foreach ($this->getLastByRound($round) as $record) {
            if (!isset($registry[$record->getUser()->__toString()])) {
                $registry[$record->getUser()->__toString()] = array();
            }
            $ref =& $registry[$record->getUser()->__toString()];
            if (!isset($ref[$record->getCategory()])) {
                $ref[$record->getCategory()] = true;
                $ret[] = $record;
            }
        }

        return $ret;
    }


    /**
     * Get submission for the round ordered by time.
     * 
     * @param mixed $round target
     * 
     * @return array
     *
     * @todo this is not what it's name suggests, and a duplication. Really needed?
     */
    public function getLastByRound($round)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT s FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.round=:round_id ORDER BY s.submitted_at DESC')
            ->setParameter('round_id', $round->getId())
            ->getResult();
    }


    /**
     * Gets submissions for a round.
     * 
     * @param mixed $round target
     * 
     * @return array
     */
    public function getByRound($round)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT s FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.round_id=:round_id ORDER BY s.submitted_at DESC')
            ->setParameter('round_id', $round->getId())
            ->getResult();
    }


    /**
     * Retunrs submission for a given user and round
     * 
     * @param mixed $user  submitte
     * @param mixed $round target round
     * 
     * @return array
     */
    public function getByUserAndRound($user, $round)
    {
        if (!is_object($user)) {
            return array();
        }

        return $this->getEntityManager()
            ->createQuery('SELECT s FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.user_id=:user_id AND s.round_id=:round_id ORDER BY s.submitted_at DESC')
            ->setParameter('user_id', $user->getId())
            ->setParameter('round_id', $round->getId())
            ->getResult();
    }


    /**
     * Returns the last submission of a user.
     * 
     * @param mixed $user  submittee
     * @param mixed $round submission round
     * 
     * @return Submission
     */
    public function getLastByUserAndRound($user, $round)
    {
        if (!is_object($user)) {
            return array();
        }

        try {
            return $this->getEntityManager()
                ->createQuery('SELECT s FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.user_id=:user_id AND s.round_id=:round_id ORDER BY s.submitted_at DESC')
                ->setParameter('user_id', $user->getId())
                ->setParameter('round_id', $round->getId())
                ->setMaxResults(1)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        }
    }


    /**
     * Returns the minimum point record for a category in a round.
     * 
     * @param mixed $round    round
     * @param mixed $category category
     * 
     * @return Submission
     */
    public function getMinFor($round, $category)
    {
        try {
            return $this->getEntityManager()
                ->createQuery('SELECT MIN(s.points) FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.category=:category AND s.round_id=:round_id')
                ->setParameter('round_id', $round->getId())
                ->setParameter('category', $category)
                ->setMaxResults(1)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        }
    }


    /**
     * Maximum point record for a category.
     * 
     * @param mixed $round    target
     * @param mixed $category category
     * 
     * @return Submission
     */
    public function getMaxFor($round, $category)
    {
        try {
            return $this->getEntityManager()
                ->createQuery('SELECT MAX(s.points) FROM Eotvos\VersenyrBundle\Entity\Submission s WHERE s.category=:category AND s.points<>0 AND s.round_id=:round_id')
                ->setParameter('round_id', $round->getId())
                ->setParameter('category', $category)
                ->setMaxResults(1)
                ->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $nre) {
            return null;
        }
    }
    
}
